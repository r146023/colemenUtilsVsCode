{
	"name": "colemenutils",
	"displayName": "ColemenUtils",
	"description": "Comprehensive utility extension for text formatting and productivity",
	"publisher": "colemen",
	"version": "0.0.2",
	"target": "es2020",
	"lib":["es2020"],
	"module": "commonjs",
	"moduleResolution": "node",
	"repository": {
		"type": "git",
		"url": "https://github.com/r146023/colemenUtilsVsCode.git"},
	"engines": {
		"vscode": "^1.74.0"
	},
	"categories": [
		"Other"
	],
	"extensionKind": [
		"ui",
		"workspace"
	],
	"activationEvents": [
		"*",
		"onCommand:colemenutils.helloWorld"
	],
	"main": "./extension.js",
	"contributes": {
		"commands": [
			{
				"command": "colemenutils.toggleBracketColorizer",
				"title": "Toggle Bracket Colorizer",
				"category": "ColemenUtils"
			},
			{
				"command": "colemenutils.refreshBracketColors",
				"title": "Refresh Bracket Colors",
				"category": "ColemenUtils"
			},
			{
				"command": "colemenutils.defaultHashSelection",
				"title": "Hash Selection",
				"category": "Hash",
				"shortTitle": "Hash Selection",
				"enablement": "editorHasSelection"
			},
			{
				"command": "colemenutils.excludeFromBarrel",
				"title": "Exclude from Barrel",
				"category": "ColemenUtils"
			},
			{
				"command": "colemenutils.collectStoriesPaths",
				"title": "Collect Stories File Paths"
			},
			{
				"command": "colemenutils.generateBarrel",
				"title": "Generate Barrel",
				"category": "ColemenUtils"
			},
			{
				"command": "colemenutils.excludeDirectoryFromBarrel",
				"title": "Exclude Directory from Barrel",
				"category": "ColemenUtils"
			},

			{
				"command": "colemenutils.md5HashSelection",
				"title": "MD5 Hash Selection"
			},
			{
				"command": "colemenutils.sha512HashSelection",
				"title": "SHA512 Hash Selection"
			},
			{
				"command": "colemenutils.sha1HashSelection",
				"title": "SHA1 Hash Selection"
			},
			{
				"command": "colemenutils.sha256HashSelection",
				"title": "SHA256 Hash Selection"
			},
			{
				"command": "colemenutils.base64EncodeDecode",
				"title": "Base64 Encode/Decode Selection"
			},
			{
				"command": "colemenutils.asciiBanner",
				"title": "Convert Selection to ASCII Banner"
			},
			{
				"command": "colemenutils.toggleBlockQuote",
				"title": "Toggle Block Quote"
			},
			{
				"command": "colemenutils.selectCurrentLine",
				"title": "Select Current Line"
			},
			{
				"command": "colemenutils.clearCurrentLine",
				"title": "Clear Current Line"
			},
			{
				"command": "colemenutils.reverseSlashesInWindowsPaths",
				"title": "Reverse Windows Paths"
			},
			{
				"command": "colemenutils.ComponentToMultiLine",
				"title": "Format a component to multiline properties",
				"category": "JSX"
			},
			{
				"command": "colemenutils.FormatSVGContentCMD",
				"title": "Format an SVG file to be less shitty",
				"category": "SVG"
			},
			{
				"command": "colemenutils.CaptureSVGViewboxValue",
				"title": "Capture SVG Viewbox value.",
				"category": "SVG"
			},
			{
				"command": "colemenutils.addMarkdownHeader",
				"title": "Add Markdown Header"
			},
			{
				"command": "colemenutils.removeMarkdownHeader",
				"title": "Remove Markdown Header"
			},
			{
				"command": "colemenutils.CaptureSVGBody",
				"title": "Capture SVG body value.",
				"category": "SVG"
			},
			{
				"command": "colemenutils.commentConsoleLogLines",
				"title": "Comment console log calls .",
				"category": "JS"
			},
			{
				"command": "colemenutils.insertUUIDs",
				"title": "Insert UUID"
			},
			{
				"command": "colemenutils.LinesToStringArray",
				"title": "Lines to Array of Strings"
			},
			{
				"command": "colemenutils.LinesToFormattedArray",
				"title": "Lines to Array of Typed Values"
			},
			{
				"command": "colemenutils.LinesToImageTag",
				"title": "Lines to image tag Array"
			},
			{
				"command": "colemenutils.ImageTagsToLinesCMD",
				"title": "Image tags to lines"
			},
			{
				"command": "colemenutils.explodeByDelim",
				"title": "Explode by Delimiter"
			},
			{
				"command": "colemenutils.linesToArray",
				"title": "Lines to Array without formatting"
			},
			{
				"command": "colemenutils.stripEmptyLines",
				"title": "Strip empty lines from the document"
			},
			{
				"command": "colemenutils.toSingleLine",
				"title": "Collapse to Single Line"
			},
			{
				"command": "colemenutils.minifyFile",
				"title": "Minify File"
			},
			{
				"command": "colemenutils.stripTrailingSpaces",
				"title": "Strip trailing spaces"
			},
			{
				"command": "colemenutils.stripExcessiveSpaces",
				"title": "Strip excessive spaces"
			},
			{
				"command": "colemenutils.shuffleLines",
				"title": "Shuffle Lines"
			},
			{
				"command": "colemenutils.stripDuplicateLines",
				"title": "Keep Unique"
			},
			{
				"command": "colemenutils.stripSelectedDuplicate",
				"title": "Keep Unique Selected"
			},
			{
				"command": "colemenutils.sortLines",
				"title": "Sort Alphabetically A-Z"
			},
			{
				"command": "colemenutils.sortLinesReversed",
				"title": "Sort Alphabetically Z-A (Reversed)"
			},
			{
				"command": "colemenutils.sortByLength",
				"title": "Sort By Length Small to Large"
			},
			{
				"command": "colemenutils.sortByLengthReversed",
				"title": "Sort By Length Large to Small (Reversed)"
			},
			{
				"command": "colemenutils.applyNewLines",
				"title": "Apply New Lines to File"
			},
			{
				"command": "colemenutils.escapeAllSingleBackSlash",
				"title": "Escape All Single Backslashes (\\)"
			},
			{
				"command": "colemenutils.escapeSelectedSingleBackSlash",
				"title": "Escape Selected Single Backslashes (\\)"
			},
			{
				"command": "colemenutils.singleToDoubleQuote",
				"title": "Single to Double quotes"
			},
			{
				"command": "colemenutils.linesToListDelimiterUnique",
				"title": "Lines to a delimited unique list",
				"shortTitle": "Lines to Unique List",
				"category": "Format"
			},
			{
				"command": "colemenutils.linesToListDelimiter",
				"title": "Lines to a delimited list",
				"shortTitle": "Lines to List",
				"category": "Format"
			},
			{
				"command": "colemenutils.reformatMarkdownTables",
				"title": "Format Tables",
				"shortTitle": "Format Tables",
				"enablement": "editorLangId == 'markdown'",
				"category": "Markdown"
			},
{
                "command": "colemenutils.formatJSON",
                "title": "Format JSON",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.minifyJSON",
                "title": "Minify JSON",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.validateJSON",
                "title": "Validate JSON",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.jsonToTypeScript",
                "title": "JSON to TypeScript Interface",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.jsonToCSV",
                "title": "JSON to CSV",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.extractJSONKeys",
                "title": "Extract JSON Keys",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.flattenJSON",
                "title": "Flatten JSON",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.unflattenJSON",
                "title": "Unflatten JSON",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.jsonPath",
                "title": "Extract JSON Path",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.sortJSONKeys",
                "title": "Sort JSON Keys",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.jsonToYAML",
                "title": "JSON to YAML",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.yamlToJSON",
                "title": "YAML to JSON",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.jsonSchema",
                "title": "Generate JSON Schema",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.escapeJSON",
                "title": "Escape JSON String",
                "category": "ColemenUtils JSON"
            },
            {
                "command": "colemenutils.unescapeJSON",
                "title": "Unescape JSON String",
                "category": "ColemenUtils JSON"
            },
			{
				"command": "colemenutils.typeScriptToJSON",
				"title": "TypeScript to JSON",
				"category": "ColemenUtils JSON"
			},
			{
				"command": "colemenutils.typeScriptToJSONSchema",
				"title": "TypeScript to JSON Schema",
				"category": "ColemenUtils JSON"
			},
			{
				"command": "colemenutils.typeScriptToMockJSON",
				"title": "TypeScript to Mock JSON",
				"category": "ColemenUtils JSON"
			},
			{
				"command": "colemenutils.commentOutPrints",
				"title": "Comment Out All Prints",
				"category": "ColemenUtils Debug"
			},
			{
				"command": "colemenutils.uncommentPrints",
				"title": "Uncomment All Prints",
				"category": "ColemenUtils Debug"
			},
			{
				"command": "colemenutils.removePrints",
				"title": "Remove All Prints",
				"category": "ColemenUtils Debug"
			},
			{
				"command": "colemenutils.togglePrintComments",
				"title": "Toggle Print Comments",
				"category": "ColemenUtils Debug"
			},
			{
				"command": "colemenutils.stripAllComments",
				"title": "Strip All Comments",
				"category": "ColemenUtils Debug"
			},
			{
				"command": "colemenutils.normalizeBlankLines",
				"title": "Normalize Blank Lines",
				"category": "ColemenUtils Format"
			},
			{
				"command": "colemenutils.enableAutoRenameTag",
				"title": "Enable Auto Rename Tag",
				"category": "ColemenUtils Tags"
			},
			{
				"command": "colemenutils.disableAutoRenameTag", 
				"title": "Disable Auto Rename Tag",
				"category": "ColemenUtils Tags"
			},
			{
				"command": "colemenutils.toggleAutoRenameTag",
				"title": "Toggle Auto Rename Tag", 
				"category": "ColemenUtils Tags"
			},
			{
				"command": "colemenutils.renameTag",
				"title": "Rename Tag",
				"category": "ColemenUtils Tags"
			}
		],
		"snippets": [
			{
				"language": "markdown",
				"path": "./md_snippets.json"
			},
			{
				"language": "javascript",
				"path": "./js_snippets.json"
			},
			{
				"language": "typescriptreact",
				"path": "./tsx_snippets.json"
			},
			{
				"language": "php",
				"path": "./php_snippets.json"
			},
			{
				"language": "json",
				"path": "./apricity_comment_snippets.json"
			},
			{
				"language": "python",
				"path": "./python_snippets.json"
			},
			{
				"language": "python",
				"path": "./python_colemenutils_snippets.json"
			},
			{
				"language": "sql",
				"path": "./sql_snippets.json"
			}
		],
		"keybindings": [
			{
				"key": "ctrl+shift+b",
				"command": "colemenutils.toggleBlockQuote",
				"when": "editorLangId == 'markdown' && editorTextFocus"
			},
			{
				"key": "ctrl+shift+delete",
				"command": "colemenutils.clearCurrentLine",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+b",
				"command": "editor.action.insertSnippet",
				"when": "editorLangId == 'markdown' && editorTextFocus",
				"args": {
					"snippet": "**${TM_SELECTED_TEXT:$0}**"
				}
			},
			{
				"key": "ctrl+i",
				"command": "editor.action.insertSnippet",
				"when": "editorLangId == 'markdown' && editorTextFocus",
				"args": {
					"snippet": "*${TM_SELECTED_TEXT:$0}*"
				}
			},
			{
				"key": "ctrl+up",
				"command": "colemenutils.addMarkdownHeader",
				"when": "editorLangId == 'markdown' && editorTextFocus"
			},
			{
				"key": "ctrl+down",
				"command": "colemenutils.removeMarkdownHeader",
				"when": "editorLangId == 'markdown' && editorTextFocus"
			},
			{
				"key": "alt+shift+i",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.action.selectHighlights",
						"notebook.selectAllFindMatches"
					]
				}
			},
			{
				"key": "ctrl+l",
				"command": "colemenutils.selectCurrentLine",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+shift+tab",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.action.previousSelectionMatchFindAction"
					]
				}
			},
			{
				"key": "ctrl+tab",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.action.nextSelectionMatchFindAction"
					]
				}
			},
			{
				"key": "ctrl+shift+down",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.action.moveLinesDownAction"
					]
				}
			},
			{
				"key": "ctrl+shift+up",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.action.moveLinesUpAction"
					]
				}
			},
			{
				"key": "alt+shift+u",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.action.transformToUppercase"
					]
				}
			},
			{
				"key": "ctrl+u",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.action.transformToLowercase"
					]
				}
			},
			{
				"key": "ctrl+q",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.action.commentLine"
					]
				}
			},
			{
				"key": "alt+0",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.foldAll"
					]
				}
			},
			{
				"key": "shift+alt+0",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.unfoldAll"
					]
				}
			},
			{
				"key": "shift+alt+x",
				"command": "colemenutils.insertBoxHeader",
				"when": "editorTextFocus"
			},
			{
				"key": "alt+x",
				"command": "colemenutils.insertSingleLineHeader",
				"when": "editorTextFocus"
			},
			{
				"key": "ctrl+d",
				"command": "runCommands",
				"args": {
					"commands": [
						"editor.action.duplicateSelection"
					]
				}
			}
		],
		"configuration": [
			{
				"title": "ColemenUtils JSON",
				"properties": {
					"colemenutils.json.indentSize": {
						"type": "number",
						"default": 2,
						"description": "Number of spaces for JSON indentation"
					}
				}
			},
			{
				"title": "Auto Rename Tag Settings",
				"properties": {
					"colemenutils.autoRenameTag.enabled": {
						"type": "boolean",
						"default": true,
						"description": "Enable automatic tag renaming"
					},
					"colemenutils.autoRenameTag.delay": {
						"type": "number",
						"default": 100,
						"description": "Delay in milliseconds before auto-renaming (debounce)"
					}
				}
			},
			{
				"title": "ColemenUtils Bracket Colorizer",
				"properties": {
					"colemenutils.bracketColorizer.enabled": {
						"type": "boolean",
						"default": true,
						"description": "Enable bracket pair colorization"
					},
					"colemenutils.bracketColorizer.colors": {
						"type": "array",
						"default": [
							"#FFD700", "#DA70D6", "#87CEEB", "#98FB98", "#F0E68C",
							"#FF6347", "#40E0D0", "#EE82EE", "#90EE90", "#FFB6C1"
						],
						"description": "Colors for bracket pairs (cycles through levels)"
					},
					"colemenutils.bracketColorizer.highlightStyle": {
						"type": "string",
						"enum": ["color", "background", "border", "underline", "glow"],
						"default": "color",
						"enumDescriptions": [
							"Color the bracket characters",
							"Highlight bracket background",
							"Add colored border around brackets",
							"Underline brackets with color",
							"Add glowing effect to brackets"
						],
						"description": "How to highlight bracket pairs"
					},
					"colemenutils.bracketColorizer.fontWeight": {
						"type": "string",
						"enum": ["normal", "bold", "bolder"],
						"default": "bold",
						"description": "Font weight for bracket highlighting"
					},
					"colemenutils.bracketColorizer.opacity": {
						"type": "string",
						"default": "1.0",
						"description": "Opacity for bracket colors (0.0 to 1.0)"
					},
					"colemenutils.bracketColorizer.highlightActiveScope": {
						"type": "boolean",
						"default": true,
						"description": "Highlight the active bracket scope around cursor"
					},
					"colemenutils.bracketColorizer.activeScopeColor": {
						"type": "string",
						"default": "rgba(255,255,255,0.05)",
						"description": "Background color for active scope highlighting"
					}
				}
			},
			{
				"title": "General Settings",
				"properties": {
					"colemenutils.barrelExcludeFiles": {
						"type": "array",
						"default": [],
						"description": "List of file paths to exclude from barrel generation",
						"markdownDescription": "List of file paths (relative to workspace) to exclude from barrel generation. Files can be added via the 'Exclude from Barrel' context menu.",
						"items": {
							"type": "string"
						}
					}

				}
			},
			{
			"title": "White Space Settings",
			"properties": {
				"colemenutils.highlightTrailingSpaces": {
					"type": "boolean",
					"default": true,
					"description": "Highlight trailing spaces in the document."
				},
				"colemenutils.trailingSpacesHighlightColor": {
					"type": "string",
					"default": "rgba(255,0,0,0.3)",
					"description": "Highlight color for trailing spaces (CSS color value)."
				}
			}},
			{
			"title": "Sorting Settings",
			"properties": {
				"colemenutils.ignoreSpecialCharactersCharacters": {
					"type": "boolean",
					"default": true,
					"description": "Ignore non-alphanumeric characters when sorting.",
					"markdownDescription": "Ignore non-alphanumeric characters when sorting alphabetically. It can act weirdly if this is set to false."
				},

				"colemenutils.numberPlacementAlphaSort": {
					"type": "string",
					"default": "before",
					"enum": [
						"before",
						"after"
					],
					"enumDescriptions": [
						"Numbers appear before letters.",
						"Numbers appear after letters."
					],
					"description": "Place numeric values before or after alphabetic values when sorting.",
					"markdownDescription": "Place numeric values before or after alphabetic values when sorting."
				},
				"colemenutils.keepOriginalFormatting": {
					"type": "boolean",
					"default": false,
					"description": "If true, the original formatting of the lines will be preserved when sorting.",
					"markdownDescription": "If true, the original formatting of the lines will be preserved when sorting. Empty lines will maintain their original placement."
				}

			}},
			{
			"title": "General Settings",
			"properties": {
				"colemenutils.linesToListDelimiter": {
					"type": "string",
					"default": ",",
					"description": "The delimiter to use when converting lines to a list.",
					"markdownDescription": "The delimiter to use when converting lines to a list. This is used in the `linesToList` command."
				},
				"colemenutils.toArrayQuoteCharacter": {
					"type": "string",
					"default": "'",
					"enum": [
						"\"",
						"'"
					],
					"enumDescriptions": [
						"Single quotes",
						"Double quotes"
					],

					"description": "The quote character to use when converting lines to an array.",
					"markdownDescription": "The quote character to use when converting lines to an array. This is used in the `linesToArray` command.",
					"tags": ["ColemenUtils","Array", "Quote", "Character"],
					"title": "Array Quote Character"

				},
				"colemenutils.showSelectedLinesStatus": {
					"type": "boolean",
					"default": true,
					"description": "Show the number of selected lines in the status bar."
				},
				"colemenutils.headerWidth": {
					"type": "number",
					"default": 80,
					"description": "Width of the generated header block."
				},
				"colemenutils.defaultHashAlgo": {
					"type": "string",
					"default": "MD5",
					"description": "The default hash algorithm to use for hashing. Options are: MD5, SHA1, SHA256, SHA512.",
					"enum":[
						"MD5",
						"SHA1",
						"SHA256",
						"SHA512"
					]
				},
				"colemenutils.bannerFont": {
					"type": "string",
					"default": "Banner",
					"description": "Font to use for ASCII banners."
				}
			}}
		],
		"menus": {
			"editor/context": [
				{
					"submenu": "colemenutils.contextFormatGeneralSubmenu",
					"when": "editorTextFocus",
					"group": "navigation"
				},
				{
					"submenu": "colemenutils.contextFormatSVGSubmenu",
					"when": "editorLangId == 'svg' && editorTextFocus",
					"group": "navigation"
				},
				{
					"submenu": "colemenutils.contextSortSubmenu",
					"when": "editorTextFocus",
					"group": "navigation"
				},
				{
					"submenu": "colemenutils.contextHashSubmenu",
					"when": "editorHasSelection",
					"group": "navigation"
				},
				{
					"submenu": "colemenutils.contextDebugSubmenu",
					"when": "editorTextFocus && (editorLangId == 'javascript' || editorLangId == 'typescript' || editorLangId == 'python' || editorLangId == 'php' || editorLangId == 'rust' || editorLangId == 'shellscript' || editorLangId == 'bash' || editorLangId == 'batch' || editorLangId == 'powershell' || editorLangId == 'javascriptreact' || editorLangId == 'typescriptreact')",
					"group": "navigation"
				}
			],

			"explorer/context": [
				{
					"command": "colemenutils.generateBarrel",
					"when": "explorerResourceIsFolder && colemenutils.isJSProject",
					"group": "navigation"
				},
				{
					"command": "colemenutils.excludeFromBarrel",
					"when": "!explorerResourceIsFolder && resourceExtname =~ /\\.(ts|tsx|js|jsx)$/ && colemenutils.isJSProject",
					"group": "navigation"
				},
				{
					"command": "colemenutils.excludeDirectoryFromBarrel",
					"when": "explorerResourceIsFolder && colemenutils.isJSProject",
					"group": "navigation"
				}
			],

			"colemenutils.contextSubmenu": [
				{
					"command": "colemenutils.insertUUIDs",
					"group": "1_main"
				},
				{
					"command": "colemenutils.stripTrailingSpaces",
					"group": "2_whitespace"
				}
			],
			"colemenutils.contextSortSubmenu": [
				{
					"command": "colemenutils.sortByLength",
					"when": "editorHasSelection == false && editorTextFocus",
					"group": "1_main"
				},
				{
					"command": "colemenutils.sortByLengthReversed",
					"when": "editorHasSelection == false && editorTextFocus",
					"group": "1_main"
				},
				{
					"command": "colemenutils.sortLines",
					"when": "editorHasSelection == false && editorTextFocus",
					"group": "1_main"
				},
				{
					"command": "colemenutils.sortLinesReversed",
					"when": "editorHasSelection == false && editorTextFocus",
					"group": "1_main"
				},
				{
					"command": "colemenutils.shuffleLines",
					"when": "editorHasSelection == false && editorTextFocus",
					"group": "1_main"
				}
			],
			"colemenutils.contextHashSubmenu": [
				{
					"command": "colemenutils.md5HashSelection",
					"group": "1_main"
				},
				{
					"command": "colemenutils.sha512HashSelection",
					"group": "1_main"
				},
				{
					"command": "colemenutils.sha256HashSelection",
					"group": "1_main"
				},
				{
					"command": "colemenutils.sha1HashSelection",
					"group": "1_main"
				}
			],
			"colemenutils.contextFormatSVGSubmenu": [
				{
					"command": "colemenutils.FormatSVGContentCMD",
					"group": "1_main"
				},
				{
					"command": "colemenutils.CaptureSVGBody",
					"group": "1_main"
				},
				{
					"command": "colemenutils.CaptureSVGViewboxValue",
					"group": "1_main"
				}
			],
			"colemenutils.contextFormatGeneralSubmenu": [
				{
					"command": "colemenutils.normalizeBlankLines",
					"group": "1_parse"
				},
				{
					"command": "colemenutils.linesToArray",
					"group": "1_main"
				},
				{
					"command": "colemenutils.LinesToStringArray",
					"group": "1_main"
				},
				{
					"command": "colemenutils.LinesToFormattedArray",
					"group": "1_main"
				},
				{
					"command": "colemenutils.linesToListDelimiter",
					"group": "1_main"
				},
				{
					"command": "colemenutils.linesToListDelimiterUnique",
					"group": "1_main"
				},
				{
					"command": "colemenutils.FormatSVGContentCMD",
					"group": "1_svg",
					"when": "editorLangId == 'xml' && editorTextFocus"
				},
				{
					"command": "colemenutils.CaptureSVGBody",
					"group": "1_svg",
					"when": "editorLangId == 'xml' && editorTextFocus"
				},
				{
					"command": "colemenutils.CaptureSVGViewboxValue",
					"group": "1_svg",
					"when": "editorLangId == 'xml' && editorTextFocus"
				},
				{
					"command": "colemenutils.reformatMarkdownTables",
					"group": "1_markdown",
					"when": "editorLangId == 'markdown' && editorTextFocus"
				},

				{
					"command": "colemenutils.minifyFile",
					"group": "1_minify"
				},
				{
					"command": "colemenutils.toSingleLine",
					"group": "1_minify"
				},
				{
					"command": "colemenutils.stripDuplicateLines",
					"group": "1_parse"
				},
				{
					"command": "colemenutils.stripEmptyLines",
					"group": "1_parse"
				},
				{
					"command": "colemenutils.stripTrailingSpaces",
					"group": "1_parse"
				},
				{
					"command": "colemenutils.stripExcessiveSpaces",
					"group": "1_parse"
				}
			],
			"colemenutils.contextDebugSubmenu": [
				{
					"command": "colemenutils.commentOutPrints",
					"group": "1_comment"
				},
				{
					"command": "colemenutils.uncommentPrints",
					"group": "1_comment"
				},
				{
					"command": "colemenutils.togglePrintComments",
					"group": "1_comment"
				},
				{
					"command": "colemenutils.stripAllComments",
					"group": "1_comment"
				},
				{
					"command": "colemenutils.removePrints",
					"group": "2_remove"
				}
			]
		},
		"submenus": [
			{
				"id": "colemenutils.contextFormatGeneralSubmenu",
				"label": "Format",
				"icon": "$(tools)"
			},
			{
				"id": "colemenutils.contextFormatSVGSubmenu",
				"label": "SVG Format",
				"icon": "$(tools)"
			},
			{
				"id": "colemenutils.contextSortSubmenu",
				"label": "Sort",
				"icon": "$(tools)"
			},
			{
				"id": "colemenutils.contextHashSubmenu",
				"label": "Hash",
				"icon": "☣"
			},
			{
				"id": "colemenutils.contextFormatGeneralSubmenu",
				"label": "Format",
				"icon": "$(tools)"
			},
			{
				"id": "colemenutils.contextFormatSVGSubmenu",
				"label": "SVG Format",
				"icon": "$(tools)"
			},
			{
				"id": "colemenutils.contextSortSubmenu",
				"label": "Sort",
				"icon": "$(tools)"
			},
			{
				"id": "colemenutils.contextHashSubmenu",
				"label": "Hash",
				"icon": "☣"
			},
			{
				"id": "colemenutils.contextDebugSubmenu",
				"label": "Debug",
				"icon": "$(debug)"
			}
		]
	},
	"scripts": {
		"lint": "eslint .",
		"pretest": "npm run lint",
		"publish": "vsce package"
	},
	"devDependencies": {
		"@types/glob": "^7.2.0",
		"@types/mocha": "^9.1.0",
		"@types/node": "14.x",
		"@types/vscode": "^1.66.0",
		"@vscode/test-electron": "^2.1.3",
		"eslint": "^8.11.0",
		"glob": "^7.2.0",
		"mocha": "^9.2.2",
		"typescript": "^4.5.5"
	},
	"dependencies": {
		"figlet": "^1.8.1",
		"xml-js": "^1.6.11",
		"xml-parser": "^1.2.1"
	}
}
